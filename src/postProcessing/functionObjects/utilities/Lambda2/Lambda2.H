/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2013-2016 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::functionObjects::Lambda2

Group
    grpUtilitiesFunctionObjects

Description
    This function object calculates and outputs the second largest eigenvalue
    of the sum of the square of the symmetrical and anti-symmetrical parts of
    the velocity gradient tensor.

    Example of function object specification to calculate Lambda2:
    \verbatim
    Lambda2_1
    {
        type        Lambda2;
        functionObjectLibs ("libutilityFunctionObjects.so");
        ...
    }
    \endverbatim

    \heading Function object usage
    \table
        Property     | Description             | Required    | Default value
        type         | Type name: Lambda2      | yes         |
        UName        | Name of velocity field  | no          | U
        resultName   | Name of Lambda2 field   | no          | <function name>
        log          | Log to standard output  | no          | yes
    \endtable

SourceFiles
    Lambda2.C

\*---------------------------------------------------------------------------*/

#ifndef functionObjects_Lambda2_H
#define functionObjects_Lambda2_H

#include "functionObject.H"
#include "volFieldsFwd.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes
class objectRegistry;

namespace functionObjects
{

/*---------------------------------------------------------------------------*\
                          Class Lambda2 Declaration
\*---------------------------------------------------------------------------*/

class Lambda2
:
    public functionObject
{
    // Private data

        //- Reference to the database
        const objectRegistry& obr_;

        //- Name of velocity field, default is "U"
        word UName_;

        //- Result name
        word resultName_;

        //- Switch to send output to Info as well as to file
        Switch log_;


    // Private Member Functions

        //- Disallow default bitwise copy construct
        Lambda2(const Lambda2&);

        //- Disallow default bitwise assignment
        void operator=(const Lambda2&);


public:

    //- Runtime type information
    TypeName("Lambda2");


    // Constructors

        //- Construct from Time and dictionary
        Lambda2
        (
            const word& name,
            const Time& runTime,
            const dictionary& dict
        );


    //- Destructor
    virtual ~Lambda2();


    // Member Functions

        //- Read the Lambda2 data
        virtual bool read(const dictionary&);

        //- Calculate Lambda2
        virtual bool execute(const bool postProcess = false);

        //- Write Lambda2
        virtual bool write(const bool postProcess = false);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace functionObjects
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
